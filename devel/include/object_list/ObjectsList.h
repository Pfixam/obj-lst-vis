// Generated by gencpp from file object_list/ObjectsList.msg
// DO NOT EDIT!


#ifndef OBJECT_LIST_MESSAGE_OBJECTSLIST_H
#define OBJECT_LIST_MESSAGE_OBJECTSLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <object_list/ObjectList.h>
#include <object_list/Geometric.h>

namespace object_list
{
template <class ContainerAllocator>
struct ObjectsList_
{
  typedef ObjectsList_<ContainerAllocator> Type;

  ObjectsList_()
    : header()
    , obj_list()
    , ego_geometric()  {
    }
  ObjectsList_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , obj_list(_alloc)
    , ego_geometric(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::object_list::ObjectList_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::object_list::ObjectList_<ContainerAllocator> >::other >  _obj_list_type;
  _obj_list_type obj_list;

   typedef std::vector< ::object_list::Geometric_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::object_list::Geometric_<ContainerAllocator> >::other >  _ego_geometric_type;
  _ego_geometric_type ego_geometric;





  typedef boost::shared_ptr< ::object_list::ObjectsList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_list::ObjectsList_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectsList_

typedef ::object_list::ObjectsList_<std::allocator<void> > ObjectsList;

typedef boost::shared_ptr< ::object_list::ObjectsList > ObjectsListPtr;
typedef boost::shared_ptr< ::object_list::ObjectsList const> ObjectsListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_list::ObjectsList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_list::ObjectsList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_list::ObjectsList_<ContainerAllocator1> & lhs, const ::object_list::ObjectsList_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.obj_list == rhs.obj_list &&
    lhs.ego_geometric == rhs.ego_geometric;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_list::ObjectsList_<ContainerAllocator1> & lhs, const ::object_list::ObjectsList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_list

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::object_list::ObjectsList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_list::ObjectsList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_list::ObjectsList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_list::ObjectsList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_list::ObjectsList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_list::ObjectsList_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_list::ObjectsList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f7cfa43090ec402bb19255e11cb1345";
  }

  static const char* value(const ::object_list::ObjectsList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f7cfa43090ec402ULL;
  static const uint64_t static_value2 = 0xbb19255e11cb1345ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_list::ObjectsList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_list/ObjectsList";
  }

  static const char* value(const ::object_list::ObjectsList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_list::ObjectsList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"ObjectList[] obj_list\n"
"Geometric[] ego_geometric\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: object_list/ObjectList\n"
"int32 obj_id\n"
"Geometric geometric\n"
"float64[36] covariance\n"
"Dimension dimension\n"
"float32 prop_existence\n"
"float32 prop_mov \n"
"Classification classification\n"
"Features features\n"
"\n"
"================================================================================\n"
"MSG: object_list/Geometric\n"
"float64 x\n"
"float64 y\n"
"float64 vx\n"
"float64 vy\n"
"float64 ax\n"
"float64 ay\n"
"float64 yaw\n"
"float64 yawrate\n"
"\n"
"================================================================================\n"
"MSG: object_list/Dimension\n"
"float64 length\n"
"float64 width\n"
"float64 height\n"
"\n"
"================================================================================\n"
"MSG: object_list/Classification\n"
"float32 car\n"
"float32 truck\n"
"float32 motorcycle\n"
"float32 bicycle\n"
"float32 pedestrian\n"
"float32 stacionary\n"
"float32 other\n"
"\n"
"================================================================================\n"
"MSG: object_list/Features\n"
"bool FL\n"
"bool FM\n"
"bool FR\n"
"bool MR\n"
"bool RR\n"
"bool RM\n"
"bool RL\n"
"bool ML\n"
;
  }

  static const char* value(const ::object_list::ObjectsList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_list::ObjectsList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.obj_list);
      stream.next(m.ego_geometric);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectsList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_list::ObjectsList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_list::ObjectsList_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "obj_list[]" << std::endl;
    for (size_t i = 0; i < v.obj_list.size(); ++i)
    {
      s << indent << "  obj_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::object_list::ObjectList_<ContainerAllocator> >::stream(s, indent + "    ", v.obj_list[i]);
    }
    s << indent << "ego_geometric[]" << std::endl;
    for (size_t i = 0; i < v.ego_geometric.size(); ++i)
    {
      s << indent << "  ego_geometric[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::object_list::Geometric_<ContainerAllocator> >::stream(s, indent + "    ", v.ego_geometric[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_LIST_MESSAGE_OBJECTSLIST_H
