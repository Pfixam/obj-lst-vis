# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from object_list/ObjectList.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import object_list.msg

class ObjectList(genpy.Message):
  _md5sum = "2a58c1f2f7bc179c5919b6ef13df4d0d"
  _type = "object_list/ObjectList"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 obj_id
Geometric geometric
float64[36] covariance
Dimension dimension
float32 prop_existence
float32 prop_mov 
Classification classification
Features features

================================================================================
MSG: object_list/Geometric
float64 x
float64 y
float64 vx
float64 vy
float64 ax
float64 ay
float64 yaw
float64 yawrate

================================================================================
MSG: object_list/Dimension
float64 length
float64 width
float64 height

================================================================================
MSG: object_list/Classification
float32 car
float32 truck
float32 motorcycle
float32 bicycle
float32 pedestrian
float32 stacionary
float32 other

================================================================================
MSG: object_list/Features
bool FL
bool FM
bool FR
bool MR
bool RR
bool RM
bool RL
bool ML
"""
  __slots__ = ['obj_id','geometric','covariance','dimension','prop_existence','prop_mov','classification','features']
  _slot_types = ['int32','object_list/Geometric','float64[36]','object_list/Dimension','float32','float32','object_list/Classification','object_list/Features']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obj_id,geometric,covariance,dimension,prop_existence,prop_mov,classification,features

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectList, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.obj_id is None:
        self.obj_id = 0
      if self.geometric is None:
        self.geometric = object_list.msg.Geometric()
      if self.covariance is None:
        self.covariance = [0.] * 36
      if self.dimension is None:
        self.dimension = object_list.msg.Dimension()
      if self.prop_existence is None:
        self.prop_existence = 0.
      if self.prop_mov is None:
        self.prop_mov = 0.
      if self.classification is None:
        self.classification = object_list.msg.Classification()
      if self.features is None:
        self.features = object_list.msg.Features()
    else:
      self.obj_id = 0
      self.geometric = object_list.msg.Geometric()
      self.covariance = [0.] * 36
      self.dimension = object_list.msg.Dimension()
      self.prop_existence = 0.
      self.prop_mov = 0.
      self.classification = object_list.msg.Classification()
      self.features = object_list.msg.Features()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i8d().pack(_x.obj_id, _x.geometric.x, _x.geometric.y, _x.geometric.vx, _x.geometric.vy, _x.geometric.ax, _x.geometric.ay, _x.geometric.yaw, _x.geometric.yawrate))
      buff.write(_get_struct_36d().pack(*self.covariance))
      _x = self
      buff.write(_get_struct_3d9f8B().pack(_x.dimension.length, _x.dimension.width, _x.dimension.height, _x.prop_existence, _x.prop_mov, _x.classification.car, _x.classification.truck, _x.classification.motorcycle, _x.classification.bicycle, _x.classification.pedestrian, _x.classification.stacionary, _x.classification.other, _x.features.FL, _x.features.FM, _x.features.FR, _x.features.MR, _x.features.RR, _x.features.RM, _x.features.RL, _x.features.ML))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.geometric is None:
        self.geometric = object_list.msg.Geometric()
      if self.dimension is None:
        self.dimension = object_list.msg.Dimension()
      if self.classification is None:
        self.classification = object_list.msg.Classification()
      if self.features is None:
        self.features = object_list.msg.Features()
      end = 0
      _x = self
      start = end
      end += 68
      (_x.obj_id, _x.geometric.x, _x.geometric.y, _x.geometric.vx, _x.geometric.vy, _x.geometric.ax, _x.geometric.ay, _x.geometric.yaw, _x.geometric.yawrate,) = _get_struct_i8d().unpack(str[start:end])
      start = end
      end += 288
      self.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 68
      (_x.dimension.length, _x.dimension.width, _x.dimension.height, _x.prop_existence, _x.prop_mov, _x.classification.car, _x.classification.truck, _x.classification.motorcycle, _x.classification.bicycle, _x.classification.pedestrian, _x.classification.stacionary, _x.classification.other, _x.features.FL, _x.features.FM, _x.features.FR, _x.features.MR, _x.features.RR, _x.features.RM, _x.features.RL, _x.features.ML,) = _get_struct_3d9f8B().unpack(str[start:end])
      self.features.FL = bool(self.features.FL)
      self.features.FM = bool(self.features.FM)
      self.features.FR = bool(self.features.FR)
      self.features.MR = bool(self.features.MR)
      self.features.RR = bool(self.features.RR)
      self.features.RM = bool(self.features.RM)
      self.features.RL = bool(self.features.RL)
      self.features.ML = bool(self.features.ML)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i8d().pack(_x.obj_id, _x.geometric.x, _x.geometric.y, _x.geometric.vx, _x.geometric.vy, _x.geometric.ax, _x.geometric.ay, _x.geometric.yaw, _x.geometric.yawrate))
      buff.write(self.covariance.tostring())
      _x = self
      buff.write(_get_struct_3d9f8B().pack(_x.dimension.length, _x.dimension.width, _x.dimension.height, _x.prop_existence, _x.prop_mov, _x.classification.car, _x.classification.truck, _x.classification.motorcycle, _x.classification.bicycle, _x.classification.pedestrian, _x.classification.stacionary, _x.classification.other, _x.features.FL, _x.features.FM, _x.features.FR, _x.features.MR, _x.features.RR, _x.features.RM, _x.features.RL, _x.features.ML))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.geometric is None:
        self.geometric = object_list.msg.Geometric()
      if self.dimension is None:
        self.dimension = object_list.msg.Dimension()
      if self.classification is None:
        self.classification = object_list.msg.Classification()
      if self.features is None:
        self.features = object_list.msg.Features()
      end = 0
      _x = self
      start = end
      end += 68
      (_x.obj_id, _x.geometric.x, _x.geometric.y, _x.geometric.vx, _x.geometric.vy, _x.geometric.ax, _x.geometric.ay, _x.geometric.yaw, _x.geometric.yawrate,) = _get_struct_i8d().unpack(str[start:end])
      start = end
      end += 288
      self.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 68
      (_x.dimension.length, _x.dimension.width, _x.dimension.height, _x.prop_existence, _x.prop_mov, _x.classification.car, _x.classification.truck, _x.classification.motorcycle, _x.classification.bicycle, _x.classification.pedestrian, _x.classification.stacionary, _x.classification.other, _x.features.FL, _x.features.FM, _x.features.FR, _x.features.MR, _x.features.RR, _x.features.RM, _x.features.RL, _x.features.ML,) = _get_struct_3d9f8B().unpack(str[start:end])
      self.features.FL = bool(self.features.FL)
      self.features.FM = bool(self.features.FM)
      self.features.FR = bool(self.features.FR)
      self.features.MR = bool(self.features.MR)
      self.features.RR = bool(self.features.RR)
      self.features.RM = bool(self.features.RM)
      self.features.RL = bool(self.features.RL)
      self.features.ML = bool(self.features.ML)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3d9f8B = None
def _get_struct_3d9f8B():
    global _struct_3d9f8B
    if _struct_3d9f8B is None:
        _struct_3d9f8B = struct.Struct("<3d9f8B")
    return _struct_3d9f8B
_struct_i8d = None
def _get_struct_i8d():
    global _struct_i8d
    if _struct_i8d is None:
        _struct_i8d = struct.Struct("<i8d")
    return _struct_i8d
